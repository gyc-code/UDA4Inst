_BASE_: "../Base-RCNN-FPN.yaml"
MODEL:
  # WEIGHTS: "detectron2://ImageNetPretrained/MSRA/R-50.pkl"
  # For better, more stable performance initialize from COCO
  # WEIGHTS: "detectron2://COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl"
  # WEIGHTS: "/home/yguo/Documents/other/detectron2/output/1023_new_urbansyn_source_ema_train_no_strongtransform/model_0019999.pth"
  WEIGHTS: '/home/yguo/Documents/other/detectron2_bp/output_saved/1023_new_urbansyn_only_source_train/model_0029999.pth'
  MASK_ON: True
  ROI_HEADS:
    NUM_CLASSES: 8  #8
    SCORE_THRESH_TEST: 0.5
# This is similar to the setting used in Mask R-CNN paper, Appendix A
# But there are some differences, e.g., we did not initialize the output
# layer using the corresponding classes from COCO
INPUT:
  MIN_SIZE_TRAIN: (800, 832, 864, 896, 928, 960, 992, 1024)
  # MIN_SIZE_TRAIN: (1024,)

  MIN_SIZE_TRAIN_SAMPLING: "choice"
  MIN_SIZE_TEST: 1024
  MAX_SIZE_TRAIN: 2048
  MAX_SIZE_TEST: 2048
DATASETS:
  TRAIN: ("uda_syn_real_instance_seg_train",)
  TEST: ("cityscapes_fine_instance_seg_val",)

SOLVER:
  BASE_LR: 0.002
  STEPS: (18000,)
  MAX_ITER: 180000
  IMS_PER_BATCH: 2
  CHECKPOINT_PERIOD: 10000
TEST:
  EVAL_PERIOD: 30
OUTPUT_DIR: "./output/urbansyn_test"
VIS_PERIOD: 1